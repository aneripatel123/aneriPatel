{"version":3,"sources":["serviceWorker.js","Components/ListsKeys.js","Components/Compose/App.js","index.js","Components/ListsKeys.module.css"],"names":["Boolean","window","location","hostname","match","UsersList","props","Fragment","className","ListsKeysCss","UserListDiv","UserListUserName","username","Button","variant","onClick","clicked","ButtonDisplayUsers","UserDetails","UserDetailsUserName","userdetails","name","age","city","ListsKeys","selectedUserHandler","id","setState","selectedUser","state","users","this","map","user","key","Container","hrDiv","filter","React","Component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wECbAC,EAAY,SAACC,GACf,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAWC,IAAaC,aACzB,uBAAGF,UAAWC,IAAaE,kBAAmBL,EAAMM,UACpD,kBAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAAST,EAAMU,QAASR,UAAWC,IAAaQ,oBAA/E,0BACA,6BAAM,8BAEV,+BAKNC,EAAc,SAACZ,GACjB,OACI,6BACI,uBAAGE,UAAWC,IAAaU,qBAAsBb,EAAMc,YAAYR,UACnE,qCAAWN,EAAMc,YAAYC,MAC7B,qCAAWf,EAAMc,YAAYE,KAC7B,qCAAWhB,EAAMc,YAAYG,QA6C1BC,E,kDAvCX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IASVmB,oBAAsB,SAACC,GACnB,EAAKC,SAAS,CAAEC,aAAcF,KAT9B,EAAKG,MAAQ,CACTD,aAAc,KACdE,MAAO,CAAC,CAAEJ,GAAI,EAAGL,KAAM,OAAQC,IAAK,GAAIC,KAAM,KAAMX,SAAU,UAC9D,CAAEc,GAAI,EAAGL,KAAM,SAAUC,IAAK,GAAIC,KAAM,KAAMX,SAAU,UACxD,CAAEc,GAAI,EAAGL,KAAM,OAAQC,IAAK,GAAIC,KAAM,KAAMX,SAAU,YAN3C,E,qDAcT,IAAD,OACCkB,EAAQC,KAAKF,MAAMC,MAAME,KAAI,SAACC,GAAD,OAC/B,kBAAC,EAAD,CAAWC,IAAKD,EAAKP,GACjBd,SAAUqB,EAAKrB,SACfI,QAAS,kBAAM,EAAKS,oBAAoBQ,EAAKP,UAErD,OACI,kBAAC,IAAMnB,SAAP,KACI,kBAAC4B,EAAA,EAAD,KACI,6CACA,6BACCL,EAED,wBAAItB,UAAWC,IAAa2B,QAE3BL,KAAKF,MAAMC,MAAMO,QAAO,SAACJ,GAAD,OAAUA,EAAKP,KAAO,EAAKG,MAAMD,gBACrDI,KAAI,SAACC,GACF,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAKP,GAAIN,YAAaa,a,GAhCnDK,IAAMC,WClBfC,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCCZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SH4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBIxI5BC,EAAOC,QAAU,CAAC,mBAAqB,sCAAsC,YAAc,+BAA+B,iBAAmB,oCAAoC,oBAAsB,uCAAuC,MAAQ,4B","file":"static/js/main.ca5fac36.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListsKeysCss from './ListsKeys.module.css';\r\n\r\nconst UsersList = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={ListsKeysCss.UserListDiv}>\r\n                <p className={ListsKeysCss.UserListUserName}>{props.username}</p>\r\n                <Button variant=\"outline-dark\" onClick={props.clicked} className={ListsKeysCss.ButtonDisplayUsers}>Click here to see more</Button>\r\n                <br /><br />\r\n            </div>\r\n            <br />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst UserDetails = (props) => {\r\n    return (\r\n        <div>\r\n            <p className={ListsKeysCss.UserDetailsUserName}>{props.userdetails.username}</p>\r\n            <p>Name : {props.userdetails.name}</p>\r\n            <p>Age  : {props.userdetails.age}</p>\r\n            <p>City : {props.userdetails.city}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass ListsKeys extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedUser: null,\r\n            users: [{ id: 1, name: 'John', age: 15, city: 'OC', username: 'User 1' },\r\n            { id: 2, name: 'Albert', age: 17, city: 'NY', username: 'User 2' },\r\n            { id: 3, name: 'Deny', age: 20, city: 'CA', username: 'User 3' }]\r\n        }\r\n    }\r\n\r\n    selectedUserHandler = (id) => {\r\n        this.setState({ selectedUser: id })\r\n    }\r\n\r\n    render() {\r\n        const users = this.state.users.map((user) =>\r\n            <UsersList key={user.id}\r\n                username={user.username}\r\n                clicked={() => this.selectedUserHandler(user.id)} />);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Container>\r\n                    <h2>List of Users</h2>\r\n                    <br />\r\n                    {users}\r\n\r\n                    <hr className={ListsKeysCss.hrDiv} />\r\n\r\n                    {this.state.users.filter((user) => user.id === this.state.selectedUser)\r\n                        .map((user) => {\r\n                            return <UserDetails key={user.id} userdetails={user} />\r\n                        })}\r\n                </Container>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListsKeys;","import React from 'react';\r\nimport ListsKeys from '../ListsKeys';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <ListsKeys />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './Components/Compose/App';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonDisplayUsers\":\"ListsKeys_ButtonDisplayUsers__jmrvB\",\"UserListDiv\":\"ListsKeys_UserListDiv__2b3H1\",\"UserListUserName\":\"ListsKeys_UserListUserName__7IAIn\",\"UserDetailsUserName\":\"ListsKeys_UserDetailsUserName__1MTI9\",\"hrDiv\":\"ListsKeys_hrDiv__3lzEm\"};"],"sourceRoot":""}