{"version":3,"sources":["Components/Header.module.css","serviceWorker.js","Components/Header.js","Components/HookuseState.js","index.js","Components/HookuseState.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","Fragment","className","HeaderCss","header","ButtonCounter","props","Button","variant","onClick","CounterType","disabled","HookuseStateCss","CounterButtonValue","buttonValue","HookuseState","useState","counter","counterBtnColor","counterObj","SetCounterValue","errorMessage","ErrorMessageDisplay","Container","CounterDiv","style","color","ErrorMsg","incObject","increaseCounter","dcrObject","setTimeout","decreaseCounter","rstObjectReset","rstObjectExisting","confirmAlert","title","message","buttons","label","resetCounter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,yB,0ICWPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yFCPSC,EARA,WACX,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAIC,UAAWC,IAAUC,QAAzB,iCCENC,EAAgB,SAACC,GACnB,OACI,kBAAC,IAAML,SAAP,KACI,6BADJ,IACW,6BACP,kBAACM,EAAA,EAAD,CAAQC,QAASF,EAAME,QAASC,QAASH,EAAMI,YAAaC,SAAUL,EAAMK,SAAUT,UAAWU,IAAgBC,oBAAjH,IAAuIP,EAAMQ,eAuE1IC,EAlEM,WAAO,IAAD,EACeC,mBAAS,CAAEC,QAAS,EAAGC,gBAAiB,cADvD,mBAChBC,EADgB,KACJC,EADI,OAEqBJ,mBAAS,MAF9B,mBAEhBK,EAFgB,KAEFC,EAFE,KAiDvB,OACI,kBAAC,IAAMrB,SAAP,KACI,kBAAC,EAAD,MACA,kBAACsB,EAAA,EAAD,KACI,yBAAKrB,UAAWU,IAAgBY,YAC5B,6BACA,wBAAIC,MAAO,CAAEC,MAAOP,EAAWD,kBAA/B,aAA8DC,EAAWF,SACzE,2BAAOf,UAAWU,IAAgBe,UAAWN,GAC7C,kBAAC,EAAD,CAAeb,QAAQ,kBAAkBE,YAAa,kBArD9C,WACpB,IAAMkB,EAAS,2BAAQT,GAAR,IAAoBF,QAASE,EAAWF,QAAU,EAAGC,gBAAiB,UACrFE,EAAgBQ,GAChBN,GAAoB,SAAAD,GAAY,OAAI,QAkDoCQ,IAAmBf,YAAY,sBAC3F,kBAAC,EAAD,CAAeN,QAAQ,iBAAiBE,YAAa,kBAhD7C,WACpB,GAAIS,EAAWF,QAAU,EAAG,CACxB,IAAMa,EAAS,2BAAQX,GAAR,IAAoBF,QAASE,EAAWF,QAAU,EAAGC,gBAAiB,QACrFE,EAAgBU,GAChBR,GAAoB,SAAAD,GAAY,OAAI,YACjC,CACH,IAAMS,EAAS,2BAAQX,GAAR,IAAoBF,QAAS,IAC5CG,EAAgBU,GAChBR,GAAoB,SAAAD,GAAY,MAAI,uCACpCU,YAAW,WACPT,GAAoB,SAAAD,GAAY,OAAI,UACrC,MAqCgEW,IAAmBlB,YAAY,sBAC1F,kBAAC,EAAD,CAAeN,QAAQ,oBAAoBE,YAAa,kBAlCnD,WACjB,IAAIuB,EAAc,2BAAQd,GAAR,IAAoBF,QAAS,EAAGC,gBAAiB,cAC/DgB,EAAiB,2BAAQf,GAAR,IAAoBF,QAASE,EAAWF,UAC7DkB,uBAAa,CACTC,MAAO,gBACPC,QAAS,iBACTC,QAAS,CACL,CACIC,MAAO,QACP9B,QAAS,WACLW,EAAgBa,GAChBX,GAAoB,SAAAD,GAAY,OAAI,UAG5C,CACIkB,MAAO,iBACP9B,QAAS,WACLW,EAAgBc,QAiB0CM,IAAgB1B,YAAY,gBAAgBH,SAAiC,IAAvBQ,EAAWF,cCrEnJwB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SH4HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMf,a,kBIxI5B5C,EAAOC,QAAU,CAAC,SAAW,+BAA+B,WAAa,iCAAiC,mBAAqB,yCAAyC,gBAAkB,yC","file":"static/js/main.3a3be49b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2MLIA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport HeaderCss from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <h5 className={HeaderCss.header}>Day-8 React Hook - useState</h5>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'\r\nimport HookuseStateCss from './HookuseState.module.css';\r\nimport Header from './Header';\r\n\r\nconst ButtonCounter = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <br /> <br />\r\n            <Button variant={props.variant} onClick={props.CounterType} disabled={props.disabled} className={HookuseStateCss.CounterButtonValue}> {props.buttonValue}</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst HookuseState = () => {\r\n    const [counterObj, SetCounterValue] = useState({ counter: 0, counterBtnColor: 'cadetblue' });\r\n    const [errorMessage, ErrorMessageDisplay] = useState(null);\r\n\r\n    const increaseCounter = () => {\r\n        const incObject = { ...counterObj, counter: counterObj.counter + 1, counterBtnColor: 'green' }\r\n        SetCounterValue(incObject)\r\n        ErrorMessageDisplay(errorMessage => null)\r\n    }\r\n\r\n    const decreaseCounter = () => {\r\n        if (counterObj.counter > 0) {\r\n            const dcrObject = { ...counterObj, counter: counterObj.counter - 1, counterBtnColor: 'red' }\r\n            SetCounterValue(dcrObject)\r\n            ErrorMessageDisplay(errorMessage => null)\r\n        } else {\r\n            const dcrObject = { ...counterObj, counter: 0 }\r\n            SetCounterValue(dcrObject)\r\n            ErrorMessageDisplay(errorMessage => \"Counter reached its minimum value\")\r\n            setTimeout(() => {\r\n                ErrorMessageDisplay(errorMessage => null)\r\n            }, 5000);\r\n        }\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        let rstObjectReset = { ...counterObj, counter: 0, counterBtnColor: 'cadetblue' }\r\n        let rstObjectExisting = { ...counterObj, counter: counterObj.counter }\r\n        confirmAlert({\r\n            title: 'Reset Counter',\r\n            message: 'Are you sure ?',\r\n            buttons: [\r\n                {\r\n                    label: 'Reset',\r\n                    onClick: () => {\r\n                        SetCounterValue(rstObjectReset);\r\n                        ErrorMessageDisplay(errorMessage => null)\r\n                    }\r\n                },\r\n                {\r\n                    label: 'Existing Value',\r\n                    onClick: () => {\r\n                        SetCounterValue(rstObjectExisting)\r\n                    }\r\n                }\r\n            ]\r\n        })\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            <Container>\r\n                <div className={HookuseStateCss.CounterDiv}>\r\n                    <br />\r\n                    <h5 style={{ color: counterObj.counterBtnColor }} >Counter : {counterObj.counter}</h5>\r\n                    <label className={HookuseStateCss.ErrorMsg}>{errorMessage}</label>\r\n                    <ButtonCounter variant=\"outline-success\" CounterType={() => increaseCounter()} buttonValue=\"Increment Counter\" />\r\n                    <ButtonCounter variant=\"outline-danger\" CounterType={() => decreaseCounter()} buttonValue=\"Decrement Counter\" />\r\n                    <ButtonCounter variant=\"outline-secondary\" CounterType={() => resetCounter()} buttonValue=\"Reset Counter\" disabled={counterObj.counter === 0} />\r\n                </div>\r\n            </Container>\r\n        </React.Fragment >\r\n    );\r\n};\r\n\r\nexport default HookuseState;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport HookuseState from './Components/HookuseState';\r\n\r\nReactDOM.render(<HookuseState /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorMsg\":\"HookuseState_ErrorMsg__3cps1\",\"CounterDiv\":\"HookuseState_CounterDiv__vNw1U\",\"CounterButtonValue\":\"HookuseState_CounterButtonValue__1W2g2\",\"CounterValueDiv\":\"HookuseState_CounterValueDiv__2TrtN\"};"],"sourceRoot":""}