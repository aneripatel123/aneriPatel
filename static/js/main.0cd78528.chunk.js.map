{"version":3,"sources":["Components/Title.module.css","serviceWorker.js","Components/Title.js","Components/DisplayUserData.js","Components/UserRegistration.js","Components/Compose/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Title","className","TitleCss","title","DisplayUserData","props","Card","style","width","Header","Body","Text","ListGroup","ListGroupItem","result","firstName","lastName","email","gender","department","UserRegistration","state","showCard","initialValues","password","confirmPassword","acceptTandC","validationSchema","Yup","shape","required","min","max","oneOf","onSubmit","setState","errors","touched","name","type","placeholder","component","value","selected","as","htmlFor","class","this","React","Component","App","Container","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cd78528.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__39oZ4\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\r\nimport TitleCss from './Title.module.css';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1 className={TitleCss.title}>Form : Formik and Yup</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Title;","import React, { Fragment } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n\r\nconst DisplayUserData = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Card style={{ width: '100%' }} className=\"text-center mt-5\" >\r\n                <Card.Header><h2>User's detail</h2></Card.Header>\r\n                <Card.Body>\r\n                    <Card.Text>\r\n                        <ListGroup className=\"list-group-flush\">\r\n                            <ListGroupItem>\r\n                                <div className=\"row\">\r\n                                    <label className=\"col-md-6 text-right\">First Name</label>\r\n                                    <label className=\"col-md-6 text-left\">{props.result.firstName}</label>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <div className=\"row\">\r\n                                    <label className=\"col-md-6 text-right\">Last Name</label>\r\n                                    <label className=\"col-md-6 text-left\">{props.result.lastName}</label>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <div className=\"row\">\r\n                                    <label className=\"col-md-6 text-right\">Email</label>\r\n                                    <label className=\"col-md-6 text-left\">{props.result.email}</label>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <div className=\"row\">\r\n                                    <label className=\"col-md-6 text-right\">Gender</label>\r\n                                    <label className=\"col-md-6 text-left\">{props.result.gender}</label>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <div className=\"row\">\r\n                                    <label className=\"col-md-6 text-right\">Department</label>\r\n                                    <label className=\"col-md-6 text-left\">{props.result.department}</label>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DisplayUserData;","import React, { Fragment } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DisplayUserData from './DisplayUserData';\r\n\r\nclass UserRegistration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showCard: false };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Formik\r\n                    initialValues={{\r\n                        firstName: '',\r\n                        lastName: '',\r\n                        password: '',\r\n                        confirmPassword: '',\r\n                        email: '',\r\n                        gender: '',\r\n                        department: '',\r\n                        acceptTandC: false\r\n                    }}\r\n\r\n                    validationSchema={\r\n                        Yup.object().shape({\r\n                            firstName: Yup.string().required(\"First name is required!\"),\r\n                            lastName: Yup.string().required(\"Last name is required!\"),\r\n                            password: Yup.string().required(\"Password is required!\")\r\n                                .min(8, 'Password Must be eight characters long!')\r\n                                .max(20, 'Too Long!'),\r\n                            confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Password must match')\r\n                                .required(\"Confirm Password is required\"),\r\n                            email: Yup.string().required(\"Email is required\").email(\"Email is invalid\"),\r\n                            gender: Yup.string().oneOf(['Male', 'Female'], \"Select Gender\"),\r\n                            department: Yup.string().required(\"Select department\"),\r\n                            acceptTandC: Yup.bool().oneOf([true], \"You must accept T&C\")\r\n                        })\r\n                    }\r\n                    onSubmit={result => {\r\n                        this.setState({\r\n                            firstName: result.firstName,\r\n                            lastName: result.lastName,\r\n                            password: result.password,\r\n                            email: result.email,\r\n                            gender: result.gender,\r\n                            department: result.department,\r\n                            acceptTandC: result.acceptTandC,\r\n                            showCard: true\r\n                        });\r\n                    }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form>\r\n                            <div className='form-group mt-3'>\r\n                                <h2>User's Registration</h2>\r\n                                <hr />\r\n                                <div className=\"form-group row mt-4\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">First Name</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"firstName\" type=\"text\" placeholder=\"First Name\" className={\"form-control \" + (errors.firstName && touched.firstName ? 'is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Last Name</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"lastName\" type=\"text\" placeholder=\"Last Name\" className={\"form-control \" + (errors.lastName && touched.lastName ? 'is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Password</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"password\" type=\"password\" placeholder=\"Password\" className={\"form-control \" + (errors.password && touched.password ? 'is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Confirm Password</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"confirmPassword\" type=\"password\" placeholder=\"Re-enter Password\" className={\"form-control \" + (errors.confirmPassword && touched.confirmPassword ? 'is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Email</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"email\" type=\"email\" placeholder=\"Email\" className={\"form-control \" + (errors.email && touched.email ? 'is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Gender</label><br />\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field name=\"gender\" type=\"radio\" value=\"Male\" className={\"mx-1\" + (errors.gender ? 'is-invalid' : '')} />\r\n                                        <label className=\"ml-3\" selected> Male </label>\r\n                                        <Field name=\"gender\" type=\"radio\" value=\"Female\" className={\"ml-3 mr-2\" + (errors.gender ? 'is-invalid' : '')} />\r\n                                        <label className=\"ml-3\"> Female </label>\r\n                                        <ErrorMessage name=\"gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <label className=\"col-md-4 col-form-label text-center\">Department</label>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Field as=\"select\" name=\"department\" className={\"form-control \" + (errors.department && touched.department ? 'is-invalid' : '')}>\r\n                                            <option value=\"Development\" selected>Development</option>\r\n                                            <option value=\"HR\">HR</option>\r\n                                            <option value=\"Sales\">Sales</option>\r\n                                            <option value=\"Marketing\">Marketing</option>\r\n                                        </Field>\r\n                                        <ErrorMessage name=\"department\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group form-check mt-4 text-center\">\r\n                                    <Field type=\"checkbox\" name=\"acceptTandC\" className={'form-check-input ' + (errors.acceptTandC && touched.acceptTandC ? ' is-invalid' : '')} />\r\n                                    <label htmlFor=\"acceptTandC\" className=\"form-check-label \">Accept Terms & Conditions</label>\r\n                                    <ErrorMessage name=\"acceptTandC\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n\r\n                                <div className=\"form-group row mt-3\">\r\n                                    <div className=\"col-md-4\" />\r\n                                    <div className=\"col-md\">\r\n                                        <button type=\"submit\" class=\"btn btn-primary ml-5 mr-5\">Submit</button>\r\n                                        <button type=\"reset\" class=\"btn btn-secondary ml-5\">Reset</button>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\" />\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                {\r\n                    this.state.showCard\r\n                        ? <DisplayUserData result={this.state} />\r\n                        : null\r\n                }\r\n            </Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserRegistration;","import React, { Fragment } from 'react';\r\nimport Title from '../Title';\r\nimport UserRegistration from '../UserRegistration';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Fragment>\r\n            <Title />\r\n            <Container>\r\n                <UserRegistration />\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from '../src/Components/Compose/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}