{"version":3,"sources":["Components/Title.module.css","serviceWorker.js","Components/Title.js","Components/DisplayData.js","Components/WithLoading.js","Components/ListExample.js","Components/Compose/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Title","className","TitleCss","title","DisplayData","props","data","length","map","key","id","name","city","WithLoading","WrappedComponent","this","isLoading","Spinner","animation","role","React","Component","ListWithLoading","ListExample","state","loading","setState","setTimeout","Container","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,MAAQ,uB,2ICWNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCPSC,EARD,WACV,OACI,kBAAC,WAAD,KACI,wBAAIC,UAAWC,IAASC,OAAxB,6B,4BCgBGC,EApBK,SAACC,GAAW,IACpBC,EAASD,EAATC,KACR,OAAKA,EACAA,EAAKC,OAEN,kBAAC,WAAD,KAEQD,EAAKE,KAAI,SAAAF,GACL,OACI,yBAAKG,IAAKH,EAAKI,IACX,qCAAWJ,EAAKK,MAChB,qCAAWL,EAAKM,MAChB,kCATE,gDADR,M,QCsBPC,MAvBf,SAAqBC,GACjB,8KAeQ,OAbsBC,KAAKV,MAAnBW,UAKM,kBAAC,WAAD,KACN,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC7B,0BAAMlB,UAAW,WAAjB,eAEJ,6CANM,kBAACa,EAAqBC,KAAKV,WALjD,GAAqBe,IAAMC,Y,QCCzBC,EAAkBT,EAAYT,GAE9BE,EAAO,CACT,CAAEI,GAAI,EAAGC,KAAM,OAAQC,KAAM,MAC7B,CAAEF,GAAI,EAAGC,KAAM,MAAOC,KAAM,OAoCjBW,E,4MAhCXC,MAAQ,CACJC,SAAS,EACTnB,KAAM,M,kEAINS,KAAKW,SAAS,CAAED,SAAS,M,2CAGP,IAAD,OACbV,KAAKS,MAAMC,SACXE,YAAW,WACP,EAAKD,SAAS,CACVD,SAAS,EAAOnB,KAAMA,MAE3B,O,+BAKP,OACI,kBAAC,WAAD,KACI,kBAACsB,EAAA,EAAD,KACI,wBAAI3B,UAAW,QAAf,yBACA,6BACA,kBAACqB,EAAD,CAAiBN,UAAWD,KAAKS,MAAMC,QAASnB,KAAMS,KAAKS,MAAMlB,a,GA1B3Dc,IAAMC,WCEjBQ,EAVH,WACR,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MAEA,kBAAC,EAAD,Q,MCFZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a721ada2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__39oZ4\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\r\nimport TitleCss from './Title.module.css';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1 className={TitleCss.title}>Higher Order Component </h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Title;","import React, { Fragment } from 'react';\r\n\r\nconst DisplayData = (props) => {\r\n    const { data } = props;\r\n    if (!data) return null;\r\n    if (!data.length) return (<p>There is not data</p>)\r\n    return (\r\n        <Fragment>\r\n            {\r\n                data.map(data => {\r\n                    return (\r\n                        <div key={data.id}>\r\n                            <p>Name : {data.name}</p>\r\n                            <p>City : {data.city}</p>\r\n                            <hr />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\nexport default DisplayData;","import React, { Fragment } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nfunction WithLoading(WrappedComponent) {\r\n    return class extends React.Component {\r\n        render() {\r\n            const { isLoading } = this.props;\r\n            let loading;\r\n            if (!isLoading) {\r\n                loading = <WrappedComponent {...this.props} />\r\n            } else {\r\n                loading = <Fragment>\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className={\"sr-only\"}>Loading...</span>\r\n                    </Spinner>\r\n                    <span>Loading...</span>\r\n                </Fragment>\r\n            }\r\n\r\n            return (\r\n                loading\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default WithLoading;","import React, { Fragment } from 'react';\r\nimport DisplayData from './DisplayData.js';\r\nimport WithLoading from './WithLoading.js';\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nconst ListWithLoading = WithLoading(DisplayData);\r\n\r\nconst data = [\r\n    { id: 1, name: 'John', city: 'KY' },\r\n    { id: 2, name: 'Doe', city: 'NZ' }\r\n]\r\n\r\nclass ListExample extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        data: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.loading) {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    loading: false, data: data\r\n                })\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container>\r\n                    <h4 className={\"my-3\"}>Information of Users </h4>\r\n                    <hr />\r\n                    <ListWithLoading isLoading={this.state.loading} data={this.state.data} />\r\n                </Container>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListExample;","import React, { Fragment } from 'react';\r\nimport Title from '../Title';\r\nimport ListExample from '../ListExample';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Fragment>\r\n            <Title />\r\n    \r\n            <ListExample />            \r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from '../src/Components/Compose/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}