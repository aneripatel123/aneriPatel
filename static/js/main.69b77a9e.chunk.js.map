{"version":3,"sources":["Components/Resizer.module.css","Components/Header.module.css","serviceWorker.js","Components/DeviceInformatiom.js","Components/Resizer.js","Components/Header.js","Components/Compose/App.js","index.js","Components/DeviceIcon.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","deviceData","id","iconType","iconPath","faMobileAlt","minWidth","maxWidth","faTabletAlt","faDesktop","DisplayDeviceInformatiom","props","icon","deviceInformation","className","DeviceIconCss","ImgDeviceIcon","DeviceName","DeviceInformatiom","Fragment","filter","width","map","key","Resizer","useState","innerWidth","windowWidth","setWindowWidth","Date","toLocaleTimeString","time","setTime","setTimeout","useEffect","captureWindowSize","currentWidth","addEventListener","removeEventListener","ResizerCss","DeviceWidthDisplay","Header","HeaderCss","header","App","AppCss","body","Container","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,mBAAqB,sC,mBCAvCD,EAAOC,QAAU,CAAC,OAAS,yB,+JCWPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCCbAC,EAAa,CACf,CAAEC,GAAI,EAAGC,SAAU,SAAUC,SAAUC,IAAaC,SAAU,IAAKC,SAAU,KAC7E,CAAEL,GAAI,EAAGC,SAAU,kBAAmBC,SAAUI,IAAaF,SAAU,IAAKC,SAAU,MACtF,CAAEL,GAAI,EAAGC,SAAU,oBAAqBC,SAAUK,IAAWH,SAAU,KAAMC,SAAU,MACvF,CAAEL,GAAI,EAAGC,SAAU,UAAWC,SAAUK,IAAWH,SAAU,KAAMC,SAAU,MAG3EG,EAA2B,SAACC,GAC9B,OACI,6BACI,6BACA,kBAAC,IAAD,CAAiBC,KAAMD,EAAME,kBAAkBT,SAAUU,UAAWC,IAAcC,gBAClF,6BACA,2BAAOF,UAAWC,IAAcE,YAAhC,iBAA2DN,EAAME,kBAAkBV,SAAnF,QAkBGe,EAbW,SAACP,GACvB,OACI,kBAAC,IAAMQ,SAAP,KAEQlB,EAAWmB,QAAO,SAACR,GAAD,OAAWD,EAAMU,OAAST,EAAKN,UAAYK,EAAMU,OAAST,EAAKL,YAC5Ee,KAAI,SAACV,GACF,OAAO,kBAAC,EAAD,CAA0BW,IAAKX,EAAKV,GAAIW,kBAAmBD,S,iBCU3EY,EAnCC,WAAO,IAAD,EACoBC,mBAAS5B,OAAO6B,YADpC,mBACXC,EADW,KACEC,EADF,OAEMH,oBAAS,IAAII,MAAOC,sBAF1B,mBAEXC,EAFW,KAELC,EAFK,KAmBlB,OAfAC,YAAW,WACPD,GAAQ,IAAIH,MAAOC,wBACpB,KAEHI,qBAAU,WACN,IAAMC,EAAoB,WACtB,IAAMC,EAAevC,OAAO6B,WAC5BE,EAAeQ,IAKnB,OAFAvC,OAAOwC,iBAAiB,SAAUF,GAE3B,WAAQtC,OAAOyC,oBAAoB,SAAUH,MACrD,IAGC,kBAAC,IAAMhB,SAAP,KACI,kBAAC,EAAD,CAAmBE,MAAOM,IAC1B,6BAEA,2BAAOb,UAAWyB,IAAWC,oBAA7B,0BAAyEb,EAAzE,OACA,6BAAM,6BAEDA,EAAc,IACT,iDAAuBI,EAAvB,KACA,O,iBCrBPU,EARA,WACX,OACI,kBAAC,IAAMtB,SAAP,KACI,wBAAIL,UAAW4B,IAAUC,QAAzB,gC,yBCYGC,EAbH,WACR,OACI,yBAAK9B,UAAW+B,IAAOC,MACnB,kBAAC,EAAD,MACA,6BACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,U,MCLpBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SL4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBMxI5BnE,EAAOC,QAAU,CAAC,WAAa,+BAA+B,cAAgB,qC","file":"static/js/main.69b77a9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DeviceWidthDisplay\":\"Resizer_DeviceWidthDisplay__2ad5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2MLIA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport DeviceIconCss from './DeviceIcon.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDesktop, faMobileAlt, faTabletAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst deviceData = [\r\n    { id: 1, iconType: 'Mobile', iconPath: faMobileAlt, minWidth: 320, maxWidth: 576 },\r\n    { id: 2, iconType: 'Tablet or i-pad', iconPath: faTabletAlt, minWidth: 577, maxWidth: 1024 },\r\n    { id: 3, iconType: 'Desktop or Laptop', iconPath: faDesktop, minWidth: 1025, maxWidth: 1400 },\r\n    { id: 4, iconType: 'Desktop', iconPath: faDesktop, minWidth: 1401, maxWidth: 2000 }\r\n]\r\n\r\nconst DisplayDeviceInformatiom = (props) => {\r\n    return (\r\n        <div>\r\n            <br />\r\n            <FontAwesomeIcon icon={props.deviceInformation.iconPath} className={DeviceIconCss.ImgDeviceIcon} />\r\n            <br />\r\n            <label className={DeviceIconCss.DeviceName}>You are using {props.deviceInformation.iconType}. </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DeviceInformatiom = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                deviceData.filter((icon) => (props.width >= icon.minWidth && props.width <= icon.maxWidth))\r\n                    .map((icon) => {\r\n                        return <DisplayDeviceInformatiom key={icon.id} deviceInformation={icon} />\r\n                    })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DeviceInformatiom;","import React, { useState, useEffect } from 'react';\r\nimport DeviceInformatiom from './DeviceInformatiom';\r\nimport ResizerCss from './Resizer.module.css';\r\n\r\nconst Resizer = () => {\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth)\r\n    const [time, setTime] = useState(new Date().toLocaleTimeString())\r\n\r\n    setTimeout(() => {\r\n        setTime(new Date().toLocaleTimeString())\r\n    }, 1000);\r\n\r\n    useEffect(() => {\r\n        const captureWindowSize = () => {\r\n            const currentWidth = window.innerWidth;\r\n            setWindowWidth(currentWidth);\r\n        }\r\n\r\n        window.addEventListener(\"resize\", captureWindowSize)\r\n\r\n        return () => { window.removeEventListener(\"resize\", captureWindowSize) }\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DeviceInformatiom width={windowWidth} />\r\n            <br />\r\n\r\n            <label className={ResizerCss.DeviceWidthDisplay}>Your device's width is {windowWidth}px.</label>\r\n            <br /><br />\r\n            {\r\n                (windowWidth > 576)\r\n                    ? <label>Current Time : {time} </label>\r\n                    : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Resizer; ","import React from 'react';\r\nimport HeaderCss from './Header.module.css';\r\n\r\n\r\nconst Header = () => { \r\n    return (\r\n        <React.Fragment>\r\n            <h1 className={HeaderCss.header}>Day-9 React Hook UseEffect</h1>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Resizer from '../Resizer';\r\nimport Header from '../Header';\r\nimport Container from 'react-bootstrap/Container';\r\nimport AppCss from './App.module.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={AppCss.body}>\r\n            <Header />\r\n            <div>\r\n                <Container>\r\n                    <Resizer />\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Components/Compose/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DeviceName\":\"DeviceIcon_DeviceName__2BXtj\",\"ImgDeviceIcon\":\"DeviceIcon_ImgDeviceIcon__2z6Lt\"};"],"sourceRoot":""}